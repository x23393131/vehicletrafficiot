{"filter":false,"title":"fog_handler.py","tooltip":"/fog_handler.py","undoManager":{"mark":76,"position":76,"stack":[[{"start":{"row":8,"column":16},"end":{"row":8,"column":34},"action":"remove","lines":["our-s3-bucket-name"],"id":107},{"start":{"row":8,"column":15},"end":{"row":8,"column":16},"action":"remove","lines":["y"]}],[{"start":{"row":8,"column":15},"end":{"row":8,"column":36},"action":"insert","lines":["lorawan-traffic-logs "],"id":108}],[{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"remove","lines":["# fog_handler.py","# AWS Lambda function to receive MQTT message from AWS IoT Rule and store in S3","","import json","import boto3","from datetime import datetime","","s3 = boto3.client('s3')","BUCKET_NAME = 'lorawan-traffic-logs '","FILE_NAME = 'data.csv'","","def lambda_handler(event, context):","    print(\"Event Received:\", json.dumps(event))","    try:","        message = json.loads(event['Records'][0]['Sns']['Message'])","        timestamp = message['timestamp']","        location = message['location']","        count = message['vehicle_count']","        line = f\"{timestamp},{location['lat']},{location['lng']},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=FILE_NAME,","            Body=line,","            ContentType='text/csv'","        )","        print(\"Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","    except Exception as e:","        print(\"Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":109}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["# fog_handler.py","# Lambda-style function for storing LoRaWAN traffic data into S3","","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":110}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"remove","lines":["# fog_handler.py","# Lambda-style function for storing LoRaWAN traffic data into S3","","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":111},{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["# fog_handler.py","# Lambda-style function for storing LoRaWAN traffic data into S3","","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Raw event received by Lambda:\")","    print(json.dumps(event, indent=2))","","    try:","        # Extract data","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        print(\"üìù Parsed data:\")","        print(f\"Timestamp: {timestamp}\")","        print(f\"Latitude: {lat}\")","        print(f\"Longitude: {lng}\")","        print(f\"Vehicle Count: {count}\")","","        # Upload to S3","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(f\"‚úÖ Successfully wrote to s3://{BUCKET_NAME}/{OBJECT_KEY}\")","        print(\"üìÑ Data written:\", line.strip())","","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error while processing or writing to S3:\")","        print(str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""]}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"remove","lines":["# fog_handler.py","# Lambda-style function for storing LoRaWAN traffic data into S3","","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Raw event received by Lambda:\")","    print(json.dumps(event, indent=2))","","    try:","        # Extract data","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        print(\"üìù Parsed data:\")","        print(f\"Timestamp: {timestamp}\")","        print(f\"Latitude: {lat}\")","        print(f\"Longitude: {lng}\")","        print(f\"Vehicle Count: {count}\")","","        # Upload to S3","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(f\"‚úÖ Successfully wrote to s3://{BUCKET_NAME}/{OBJECT_KEY}\")","        print(\"üìÑ Data written:\", line.strip())","","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error while processing or writing to S3:\")","        print(str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":112},{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["# fog_handler.py","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""]}],[{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"remove","lines":["# fog_handler.py","import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":113}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        # Check for test event or IoT rule format","        if \"Records\" in event:  # S3 trigger (ignore)","            print(\"‚ö†Ô∏è Received S3 event, skipping...\")","            return {\"statusCode\": 200, \"body\": \"S3 event skipped.\"}","","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","","        # Properly formatted CSV line","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":114}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        # Check for test event or IoT rule format","        if \"Records\" in event:  # S3 trigger (ignore)","            print(\"‚ö†Ô∏è Received S3 event, skipping...\")","            return {\"statusCode\": 200, \"body\": \"S3 event skipped.\"}","","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","","        # Properly formatted CSV line","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line,","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data written to S3.\")","        return {\"statusCode\": 200, \"body\": \"Success\"}","","    except Exception as e:","        print(\"‚ùå Error:\", str(e))","        return {\"statusCode\": 500, \"body\": str(e)}",""],"id":115},{"start":{"row":0,"column":0},"end":{"row":49,"column":0},"action":"insert","lines":["import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        # Skip S3 trigger events","        if \"Records\" in event and event[\"Records\"][0].get(\"eventSource\") == \"aws:s3\":","            print(\"‚ö†Ô∏è Received S3 trigger event ‚Äî skipping processing.\")","            return {","                \"statusCode\": 200,","                \"body\": \"S3 event ignored.\"","            }","","        # Extract real-time IoT data","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","","        # Format data as CSV line","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","        print(\"‚úÖ Parsed CSV line:\", line)","","        # Write or append to S3 (replace if needed)","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line.encode('utf-8'),","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data successfully written to S3.\")","        return {","            \"statusCode\": 200,","            \"body\": \"Traffic data saved to S3\"","        }","","    except Exception as e:","        print(\"‚ùå Error processing event:\", str(e))","        return {","            \"statusCode\": 500,","            \"body\": f\"Error: {str(e)}\"","        }",""]}],[{"start":{"row":0,"column":0},"end":{"row":49,"column":0},"action":"remove","lines":["import json","import boto3","","s3 = boto3.client(\"s3\")","BUCKET_NAME = \"lorawan-traffic-logs\"","OBJECT_KEY = \"logs/traffic-latest.csv\"","","def lambda_handler(event, context=None):","    print(\"üì© Event received:\", json.dumps(event))","","    try:","        # Skip S3 trigger events","        if \"Records\" in event and event[\"Records\"][0].get(\"eventSource\") == \"aws:s3\":","            print(\"‚ö†Ô∏è Received S3 trigger event ‚Äî skipping processing.\")","            return {","                \"statusCode\": 200,","                \"body\": \"S3 event ignored.\"","            }","","        # Extract real-time IoT data","        timestamp = event['timestamp']","        lat = event['location']['lat']","        lng = event['location']['lng']","        count = event['vehicle_count']","","        # Format data as CSV line","        line = f\"{timestamp},{lat},{lng},{count}\\n\"","        print(\"‚úÖ Parsed CSV line:\", line)","","        # Write or append to S3 (replace if needed)","        s3.put_object(","            Bucket=BUCKET_NAME,","            Key=OBJECT_KEY,","            Body=line.encode('utf-8'),","            ContentType=\"text/csv\"","        )","","        print(\"‚úÖ Data successfully written to S3.\")","        return {","            \"statusCode\": 200,","            \"body\": \"Traffic data saved to S3\"","        }","","    except Exception as e:","        print(\"‚ùå Error processing event:\", str(e))","        return {","            \"statusCode\": 500,","            \"body\": f\"Error: {str(e)}\"","        }",""],"id":116}],[{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["# fog_handler.py","# Receives LoRaWAN data via MQTT and prints to terminal (no CSV/S3)","","import paho.mqtt.client as mqtt","import json","","MQTT_BROKER = \"127.0.0.1\"  # or your broker IP","MQTT_PORT = 1883","TOPIC = \"lorawan/traffic\"","","def on_connect(client, userdata, flags, rc):","    print(\"‚úÖ Connected to MQTT Broker:\", rc)","    client.subscribe(TOPIC)","    print(f\"üì° Subscribed to topic: {TOPIC}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload['timestamp']","        lat = payload['location']['lat']","        lng = payload['location']['lng']","        count = payload['vehicle_count']","","        print(f\"üöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat}, {lng})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except Exception as e:","        print(\"‚ùå Error processing message:\", str(e))","","# MQTT Client Setup","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.connect(MQTT_BROKER, MQTT_PORT, 60)","print(\"üöÄ Fog handler running. Waiting for LoRaWAN messages...\")","client.loop_forever()",""],"id":117}],[{"start":{"row":6,"column":16},"end":{"row":6,"column":24},"action":"remove","lines":["27.0.0.1"],"id":118},{"start":{"row":6,"column":15},"end":{"row":6,"column":16},"action":"remove","lines":["1"]}],[{"start":{"row":6,"column":15},"end":{"row":6,"column":61},"action":"insert","lines":["a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com"],"id":119}],[{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":120}],[{"start":{"row":10,"column":0},"end":{"row":14,"column":1},"action":"insert","lines":["client.tls_set(","    ca_certs=\"certs/AmazonRootCA1.pem\",","    certfile=\"certs/device-certificate.pem.crt\",","    keyfile=\"certs/private.pem.key\"",")"],"id":121}],[{"start":{"row":14,"column":1},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":122}],[{"start":{"row":10,"column":0},"end":{"row":14,"column":1},"action":"remove","lines":["client.tls_set(","    ca_certs=\"certs/AmazonRootCA1.pem\",","    certfile=\"certs/device-certificate.pem.crt\",","    keyfile=\"certs/private.pem.key\"",")"],"id":123}],[{"start":{"row":10,"column":0},"end":{"row":12,"column":35},"action":"insert","lines":["ca_certs=\"certs/AmazonRootCA1.pem\",","    certfile=\"certs/device-certificate.pem.crt\",","    keyfile=\"certs/private.pem.key\""],"id":124}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"remove","lines":["    "],"id":125}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "],"id":126}],[{"start":{"row":0,"column":0},"end":{"row":43,"column":0},"action":"remove","lines":["# fog_handler.py","# Receives LoRaWAN data via MQTT and prints to terminal (no CSV/S3)","","import paho.mqtt.client as mqtt","import json","","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # or your broker IP","MQTT_PORT = 1883","TOPIC = \"lorawan/traffic\"","","ca_certs=\"certs/AmazonRootCA1.pem\",","certfile=\"certs/device-certificate.pem.crt\",","keyfile=\"certs/private.pem.key\"","","def on_connect(client, userdata, flags, rc):","    print(\"‚úÖ Connected to MQTT Broker:\", rc)","    client.subscribe(TOPIC)","    print(f\"üì° Subscribed to topic: {TOPIC}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload['timestamp']","        lat = payload['location']['lat']","        lng = payload['location']['lng']","        count = payload['vehicle_count']","","        print(f\"üöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat}, {lng})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except Exception as e:","        print(\"‚ùå Error processing message:\", str(e))","","# MQTT Client Setup","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.connect(MQTT_BROKER, MQTT_PORT, 60)","print(\"üöÄ Fog handler running. Waiting for LoRaWAN messages...\")","client.loop_forever()",""],"id":127},{"start":{"row":0,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["# fog_handler.py","# Receives LoRaWAN MQTT data and prints to terminal","","import paho.mqtt.client as mqtt","import json","","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","","def on_connect(client, userdata, flags, rc):","    print(\"‚úÖ Connected to AWS IoT with result code\", rc)","    client.subscribe(TOPIC)","    print(f\"üì° Subscribed to topic: {TOPIC}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload['timestamp']","        lat = payload['location']['lat']","        lng = payload['location']['lng']","        count = payload['vehicle_count']","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat}, {lng})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except Exception as e:","        print(\"‚ùå Error processing message:\", str(e))","","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","# Enable TLS with AWS certs","client.tls_set(","    ca_certs=\"certs/AmazonRootCA1.pem\",","    certfile=\"certs/device-certificate.pem.crt\",","    keyfile=\"certs/private.pem.key\"",")","","client.connect(MQTT_BROKER, MQTT_PORT, 60)","","print(\"üöÄ Fog handler running. Waiting for LoRaWAN messages...\\n\")","client.loop_forever()",""]}],[{"start":{"row":0,"column":0},"end":{"row":46,"column":0},"action":"remove","lines":["# fog_handler.py","# Receives LoRaWAN MQTT data and prints to terminal","","import paho.mqtt.client as mqtt","import json","","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","","def on_connect(client, userdata, flags, rc):","    print(\"‚úÖ Connected to AWS IoT with result code\", rc)","    client.subscribe(TOPIC)","    print(f\"üì° Subscribed to topic: {TOPIC}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload['timestamp']","        lat = payload['location']['lat']","        lng = payload['location']['lng']","        count = payload['vehicle_count']","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat}, {lng})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except Exception as e:","        print(\"‚ùå Error processing message:\", str(e))","","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","# Enable TLS with AWS certs","client.tls_set(","    ca_certs=\"certs/AmazonRootCA1.pem\",","    certfile=\"certs/device-certificate.pem.crt\",","    keyfile=\"certs/private.pem.key\"",")","","client.connect(MQTT_BROKER, MQTT_PORT, 60)","","print(\"üöÄ Fog handler running. Waiting for LoRaWAN messages...\\n\")","client.loop_forever()",""],"id":128}],[{"start":{"row":0,"column":0},"end":{"row":91,"column":10},"action":"insert","lines":["# fog_handler.py","# Receives LoRaWAN MQTT data and prints to terminal","","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","def on_connect(client, userdata, flags, rc, properties=None):","    if rc == 0:","        print(\"‚úÖ Connected to AWS IoT Core successfully\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed with result code {rc}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        ","        # Extract data with error handling","        timestamp = payload.get('timestamp', 'N/A')","        location = payload.get('location', {})","        lat = location.get('lat', 0)","        lng = location.get('lng', 0)","        count = payload.get('vehicle_count', 0)","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except json.JSONDecodeError:","        print(\"‚ùå Failed to decode JSON message\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def on_disconnect(client, userdata, rc, properties=None):","    print(f\"‚ö†Ô∏è Disconnected from broker (rc: {rc})\")","    if rc != 0:","        print(\"‚è≥ Attempting to reconnect...\")","        time.sleep(5)","        client.reconnect()","","def main():","    # Initialize client with modern callback API","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    ","    # Assign callbacks","    client.on_connect = on_connect","    client.on_message = on_message","    client.on_disconnect = on_disconnect","","    # Configure TLS","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    # Connect to broker","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"Press Ctrl+C to exit\\n\")","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Received shutdown signal, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error: {str(e)}\")","","if __name__ == \"__main__\":","    main()"],"id":129}],[{"start":{"row":52,"column":4},"end":{"row":52,"column":58},"action":"remove","lines":["client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)"],"id":130},{"start":{"row":52,"column":4},"end":{"row":53,"column":0},"action":"insert","lines":["client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)",""]}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":10},"action":"remove","lines":["# fog_handler.py","# Receives LoRaWAN MQTT data and prints to terminal","","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","def on_connect(client, userdata, flags, rc, properties=None):","    if rc == 0:","        print(\"‚úÖ Connected to AWS IoT Core successfully\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed with result code {rc}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        ","        # Extract data with error handling","        timestamp = payload.get('timestamp', 'N/A')","        location = payload.get('location', {})","        lat = location.get('lat', 0)","        lng = location.get('lng', 0)","        count = payload.get('vehicle_count', 0)","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except json.JSONDecodeError:","        print(\"‚ùå Failed to decode JSON message\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def on_disconnect(client, userdata, rc, properties=None):","    print(f\"‚ö†Ô∏è Disconnected from broker (rc: {rc})\")","    if rc != 0:","        print(\"‚è≥ Attempting to reconnect...\")","        time.sleep(5)","        client.reconnect()","","def main():","    # Initialize client with modern callback API","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","","    ","    # Assign callbacks","    client.on_connect = on_connect","    client.on_message = on_message","    client.on_disconnect = on_disconnect","","    # Configure TLS","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    # Connect to broker","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"Press Ctrl+C to exit\\n\")","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Received shutdown signal, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error: {str(e)}\")","","if __name__ == \"__main__\":","    main()"],"id":131}],[{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal","","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""],"id":132}],[{"start":{"row":2,"column":0},"end":{"row":3,"column":28},"action":"insert","lines":["from flask import Flask, jsonify","from threading import Thread"],"id":133}],[{"start":{"row":0,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(\"--------------------------------------------------\")","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""],"id":134},{"start":{"row":0,"column":0},"end":{"row":127,"column":0},"action":"insert","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","# Store last 25 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway","        })","","        if len(message_history) > 100:","            message_history.pop(0)","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def run_flask():","    app.run(host=\"0.0.0.0\", port=5000)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""]}],[{"start":{"row":86,"column":36},"end":{"row":86,"column":37},"action":"remove","lines":["0"],"id":135}],[{"start":{"row":86,"column":36},"end":{"row":86,"column":37},"action":"insert","lines":["1"],"id":136}],[{"start":{"row":86,"column":33},"end":{"row":86,"column":37},"action":"remove","lines":["5001"],"id":137},{"start":{"row":86,"column":33},"end":{"row":86,"column":37},"action":"insert","lines":["8080"]}],[{"start":{"row":0,"column":0},"end":{"row":127,"column":0},"action":"remove","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","# Store last 25 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway","        })","","        if len(message_history) > 100:","            message_history.pop(0)","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def run_flask():","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""],"id":138},{"start":{"row":0,"column":0},"end":{"row":148,"column":0},"action":"insert","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","import os, urllib.request","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","# Store last 25 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway","        })","","        if len(message_history) > 100:","            message_history.pop(0)","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","# --- Cloud9 URL helper ---","def get_cloud9_preview_url(port=8080):","    try:","        hostname = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/public-hostname\", timeout=1","        ).read().decode(\"utf-8\").strip()","        az = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/placement/availability-zone\", timeout=1","        ).read().decode(\"utf-8\").strip()","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or az[:-1]","        cloud9_id = hostname.split(\".\")[0]","        return f\"https://{cloud9_id}.vfs.cloud9.{region}.amazonaws.com/\"","    except Exception:","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or \"us-east-1\"","        return f\"https://<your-cloud9-id>.vfs.cloud9.{region}.amazonaws.com/\"","","def run_flask():","    url = get_cloud9_preview_url(port=8080)","    print(\"\\n‚úÖ Cloud9 preview URL:\")","    print(url)","    print(\"‚ÑπÔ∏è If it 404s, use Cloud9 menu: Preview ‚Üí Preview Running Application.\\n\")","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""]}],[{"start":{"row":100,"column":25},"end":{"row":100,"column":41},"action":"remove","lines":["<your-cloud9-id>"],"id":139}],[{"start":{"row":100,"column":25},"end":{"row":100,"column":57},"action":"insert","lines":["ac718ba3fecf4daaa8b218382a1a1d8c"],"id":140}],[{"start":{"row":53,"column":0},"end":{"row":85,"column":0},"action":"remove","lines":["def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0)","        lng = location.get(\"lng\", 0)","        count = payload.get(\"vehicle_count\", 0)","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway","        })","","        if len(message_history) > 100:","            message_history.pop(0)","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")",""],"id":141},{"start":{"row":53,"column":0},"end":{"row":101,"column":0},"action":"insert","lines":["def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0.0)","        lng = location.get(\"lng\", 0.0)","        count = int(payload.get(\"vehicle_count\", 0))","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        level = classify_traffic(count)","        level_emoji = {\"LOW\":\"üü¢\", \"MEDIUM\":\"üü†\", \"HEAVY\":\"üî¥\"}[level]","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(f\"   ‚Üí Traffic Level: {level_emoji} {level}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway,","            \"traffic_level\": level","        })","        if len(message_history) > 100:","            message_history.pop(0)","","        # Optional: publish an alert for MEDIUM/HEAVY only","        if level in (\"MEDIUM\", \"HEAVY\"):","            alert = {","                \"timestamp\": timestamp,","                \"gateway_id\": gateway,","                \"vehicle_count\": count,","                \"traffic_level\": level,","                \"location\": {\"lat\": lat, \"lng\": lng}","            }","            # if you want alert retained, use: client.publish(ALERT_TOPIC, json.dumps(alert), retain=True)","            client.publish(ALERT_TOPIC, json.dumps(alert))","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")",""]}],[{"start":{"row":0,"column":0},"end":{"row":164,"column":0},"action":"remove","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","import os, urllib.request","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","CERT_PATH = \"certs/\"","","# Store last 25 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0.0)","        lng = location.get(\"lng\", 0.0)","        count = int(payload.get(\"vehicle_count\", 0))","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        level = classify_traffic(count)","        level_emoji = {\"LOW\":\"üü¢\", \"MEDIUM\":\"üü†\", \"HEAVY\":\"üî¥\"}[level]","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(f\"   ‚Üí Traffic Level: {level_emoji} {level}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway,","            \"traffic_level\": level","        })","        if len(message_history) > 100:","            message_history.pop(0)","","        # Optional: publish an alert for MEDIUM/HEAVY only","        if level in (\"MEDIUM\", \"HEAVY\"):","            alert = {","                \"timestamp\": timestamp,","                \"gateway_id\": gateway,","                \"vehicle_count\": count,","                \"traffic_level\": level,","                \"location\": {\"lat\": lat, \"lng\": lng}","            }","            # if you want alert retained, use: client.publish(ALERT_TOPIC, json.dumps(alert), retain=True)","            client.publish(ALERT_TOPIC, json.dumps(alert))","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","# --- Cloud9 URL helper ---","def get_cloud9_preview_url(port=8080):","    try:","        hostname = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/public-hostname\", timeout=1","        ).read().decode(\"utf-8\").strip()","        az = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/placement/availability-zone\", timeout=1","        ).read().decode(\"utf-8\").strip()","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or az[:-1]","        cloud9_id = hostname.split(\".\")[0]","        return f\"https://{cloud9_id}.vfs.cloud9.{region}.amazonaws.com/\"","    except Exception:","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or \"us-east-1\"","        return f\"https://ac718ba3fecf4daaa8b218382a1a1d8c.vfs.cloud9.{region}.amazonaws.com/\"","","def run_flask():","    url = get_cloud9_preview_url(port=8080)","    print(\"\\n‚úÖ Cloud9 preview URL:\")","    print(url)","    print(\"‚ÑπÔ∏è If it 404s, use Cloud9 menu: Preview ‚Üí Preview Running Application.\\n\")","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()",""],"id":142}],[{"start":{"row":0,"column":0},"end":{"row":171,"column":10},"action":"insert","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify","from threading import Thread","import paho.mqtt.client as mqtt","import json","import time","import ssl","import os, urllib.request","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","ALERT_TOPIC = \"lorawan/alerts\"","CERT_PATH = \"certs/\"","","# Store last 100 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","","def classify_traffic(vehicle_count):","    \"\"\"Classify traffic level based on vehicle count\"\"\"","    if vehicle_count < 5:","        return \"LOW\"","    elif 5 <= vehicle_count < 15:","        return \"MEDIUM\"","    else:","        return \"HEAVY\"","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0.0)","        lng = location.get(\"lng\", 0.0)","        count = int(payload.get(\"vehicle_count\", 0))","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        level = classify_traffic(count)","        level_emoji = {\"LOW\":\"üü¢\", \"MEDIUM\":\"üü†\", \"HEAVY\":\"üî¥\"}[level]","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(f\"   ‚Üí Traffic Level: {level_emoji} {level}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway,","            \"traffic_level\": level","        })","        if len(message_history) > 100:","            message_history.pop(0)","","        # Publish an alert for MEDIUM/HEAVY traffic","        if level in (\"MEDIUM\", \"HEAVY\"):","            alert = {","                \"timestamp\": timestamp,","                \"gateway_id\": gateway,","                \"vehicle_count\": count,","                \"traffic_level\": level,","                \"location\": {\"lat\": lat, \"lng\": lng}","            }","            client.publish(ALERT_TOPIC, json.dumps(alert))","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def get_cloud9_preview_url(port=8080):","    try:","        hostname = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/public-hostname\", timeout=1","        ).read().decode(\"utf-8\").strip()","        az = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/placement/availability-zone\", timeout=1","        ).read().decode(\"utf-8\").strip()","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or az[:-1]","        cloud9_id = hostname.split(\".\")[0]","        return f\"https://{cloud9_id}.vfs.cloud9.{region}.amazonaws.com/\"","    except Exception:","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or \"us-east-1\"","        return f\"https://ac718ba3fecf4daaa8b218382a1a1d8c.vfs.cloud9.{region}.amazonaws.com/\"","","def run_flask():","    url = get_cloud9_preview_url(port=8080)","    print(\"\\n‚úÖ Cloud9 preview URL:\")","    print(url)","    print(\"‚ÑπÔ∏è If it 404s, use Cloud9 menu: Preview ‚Üí Preview Running Application.\\n\")","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()"],"id":143}],[{"start":{"row":24,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["# Add after Flask app initialization","sio = socketio.Server(async_mode='threading')","app = Flask(__name__)","app.wsgi_app = socketio.WSGIApp(sio, app.wsgi_app)","","# Add shared data lock","data_lock = Lock()","","# Modify your root route","@app.route(\"/\")","def dashboard():","    with data_lock:","        return render_template(\"dashboard.html\",","                            messages=message_history[-25:],","                            gateways=sorted(list(gateways_seen)),","                            status=\"Fog handler is running\")","","# Add this new function to emit real-time updates","def emit_update(data):","    with data_lock:","        sio.emit('update', {","            'lat': data['lat'],","            'lng': data['lng'],","            'vehicle_count': data['vehicle_count'],","            'traffic_level': data['traffic_level'],","            'gateway': data['gateway'],","            'timestamp': data['timestamp']","        })",""],"id":144}],[{"start":{"row":4,"column":28},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":145}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["import socketio",""],"id":146}],[{"start":{"row":5,"column":15},"end":{"row":6,"column":0},"action":"remove","lines":["",""],"id":147}],[{"start":{"row":3,"column":32},"end":{"row":3,"column":33},"action":"insert","lines":[","],"id":148}],[{"start":{"row":3,"column":33},"end":{"row":3,"column":34},"action":"insert","lines":[" "],"id":149}],[{"start":{"row":3,"column":34},"end":{"row":3,"column":49},"action":"insert","lines":["render_template"],"id":150}],[{"start":{"row":8,"column":11},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":151}],[{"start":{"row":9,"column":0},"end":{"row":9,"column":34},"action":"insert","lines":["from threading import Thread, Lock"],"id":152}],[{"start":{"row":0,"column":0},"end":{"row":201,"column":10},"action":"remove","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener that prints vehicle data to terminal and exposes REST API","","from flask import Flask, jsonify, render_template","from threading import Thread","import socketio","import paho.mqtt.client as mqtt","import json","import time","from threading import Thread, Lock","import ssl","import os, urllib.request","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"  # your AWS IoT Core endpoint","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","ALERT_TOPIC = \"lorawan/alerts\"","CERT_PATH = \"certs/\"","","# Store last 100 messages","message_history = []","gateways_seen = set()","","# Flask App","app = Flask(__name__)","# Add after Flask app initialization","sio = socketio.Server(async_mode='threading')","app = Flask(__name__)","app.wsgi_app = socketio.WSGIApp(sio, app.wsgi_app)","","# Add shared data lock","data_lock = Lock()","","# Modify your root route","@app.route(\"/\")","def dashboard():","    with data_lock:","        return render_template(\"dashboard.html\",","                            messages=message_history[-25:],","                            gateways=sorted(list(gateways_seen)),","                            status=\"Fog handler is running\")","","# Add this new function to emit real-time updates","def emit_update(data):","    with data_lock:","        sio.emit('update', {","            'lat': data['lat'],","            'lng': data['lng'],","            'vehicle_count': data['vehicle_count'],","            'traffic_level': data['traffic_level'],","            'gateway': data['gateway'],","            'timestamp': data['timestamp']","        })","","def classify_traffic(vehicle_count):","    \"\"\"Classify traffic level based on vehicle count\"\"\"","    if vehicle_count < 5:","        return \"LOW\"","    elif 5 <= vehicle_count < 15:","        return \"MEDIUM\"","    else:","        return \"HEAVY\"","","@app.route(\"/\")","def status():","    return jsonify({\"status\": \"Fog handler is running\", \"messages_received\": len(message_history)})","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        timestamp = payload.get(\"timestamp\", \"N/A\")","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0.0)","        lng = location.get(\"lng\", 0.0)","        count = int(payload.get(\"vehicle_count\", 0))","        gateway = payload.get(\"gateway_id\", \"unknown\")","","        level = classify_traffic(count)","        level_emoji = {\"LOW\":\"üü¢\", \"MEDIUM\":\"üü†\", \"HEAVY\":\"üî¥\"}[level]","","        print(f\"\\nüöó Vehicle Data Received @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicle Count: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(f\"   ‚Üí Traffic Level: {level_emoji} {level}\")","        print(\"--------------------------------------------------\")","","        gateways_seen.add(gateway)","        message_history.append({","            \"timestamp\": timestamp,","            \"lat\": lat,","            \"lng\": lng,","            \"vehicle_count\": count,","            \"gateway\": gateway,","            \"traffic_level\": level","        })","        if len(message_history) > 100:","            message_history.pop(0)","","        # Publish an alert for MEDIUM/HEAVY traffic","        if level in (\"MEDIUM\", \"HEAVY\"):","            alert = {","                \"timestamp\": timestamp,","                \"gateway_id\": gateway,","                \"vehicle_count\": count,","                \"traffic_level\": level,","                \"location\": {\"lat\": lat, \"lng\": lng}","            }","            client.publish(ALERT_TOPIC, json.dumps(alert))","","    except json.JSONDecodeError:","        print(\"‚ùå JSON Decode Error\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def get_cloud9_preview_url(port=8080):","    try:","        hostname = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/public-hostname\", timeout=1","        ).read().decode(\"utf-8\").strip()","        az = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/placement/availability-zone\", timeout=1","        ).read().decode(\"utf-8\").strip()","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or az[:-1]","        cloud9_id = hostname.split(\".\")[0]","        return f\"https://{cloud9_id}.vfs.cloud9.{region}.amazonaws.com/\"","    except Exception:","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or \"us-east-1\"","        return f\"https://ac718ba3fecf4daaa8b218382a1a1d8c.vfs.cloud9.{region}.amazonaws.com/\"","","def run_flask():","    url = get_cloud9_preview_url(port=8080)","    print(\"\\n‚úÖ Cloud9 preview URL:\")","    print(url)","    print(\"‚ÑπÔ∏è If it 404s, use Cloud9 menu: Preview ‚Üí Preview Running Application.\\n\")","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop.\\n\")","","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error in loop: {str(e)}\")","","if __name__ == \"__main__\":","    main()"],"id":153}],[{"start":{"row":0,"column":0},"end":{"row":220,"column":10},"action":"insert","lines":["# fog_handler.py","# Real-time LoRaWAN MQTT listener with WebSocket dashboard","","from flask import Flask, jsonify, render_template","from threading import Thread","import socketio","import paho.mqtt.client as mqtt","import json","import time","from threading import Thread, Lock","import ssl","import os","import urllib.request","","# MQTT Configuration","MQTT_BROKER = \"a3hyjp4joybycm-ats.iot.us-east-1.amazonaws.com\"","MQTT_PORT = 8883","TOPIC = \"lorawan/traffic\"","ALERT_TOPIC = \"lorawan/alerts\"","CERT_PATH = \"certs/\"","","# Data storage","message_history = []","gateways_seen = set()","data_lock = Lock()","","# Initialize Flask and Socket.IO","app = Flask(__name__)","sio = socketio.Server(async_mode='threading', cors_allowed_origins=\"*\")","app.wsgi_app = socketio.WSGIApp(sio, app.wsgi_app)","","# Socket.IO Event Handlers","@sio.event","def connect(sid, environ):","    print(f\"üì° Client connected: {sid}\")","    with data_lock:","        # Send initial data to new client","        sio.emit('init', {","            'messages': message_history[-25:],","            'gateways': sorted(list(gateways_seen))","        }, room=sid)","","@sio.event","def disconnect(sid):","    print(f\"üì° Client disconnected: {sid}\")","","# Helper Functions","def classify_traffic(vehicle_count):","    \"\"\"Classify traffic level based on vehicle count\"\"\"","    if vehicle_count < 5:","        return \"LOW\"","    elif 5 <= vehicle_count < 15:","        return \"MEDIUM\"","    else:","        return \"HEAVY\"","","def get_cloud9_preview_url(port=8080):","    try:","        hostname = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/public-hostname\", ","            timeout=1","        ).read().decode(\"utf-8\").strip()","        az = urllib.request.urlopen(","            \"http://169.254.169.254/latest/meta-data/placement/availability-zone\", ","            timeout=1","        ).read().decode(\"utf-8\").strip()","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or az[:-1]","        cloud9_id = hostname.split(\".\")[0]","        return f\"https://{cloud9_id}.vfs.cloud9.{region}.amazonaws.com/\"","    except Exception:","        region = os.getenv(\"AWS_REGION\") or os.getenv(\"AWS_DEFAULT_REGION\") or \"us-east-1\"","        return f\"https://{region}.console.aws.amazon.com/cloud9\"","","# Flask Routes","@app.route(\"/\")","def dashboard():","    with data_lock:","        return render_template(\"dashboard.html\",","                            messages=message_history[-25:],","                            gateways=sorted(list(gateways_seen)),","                            status=\"Fog handler is running\")","","@app.route(\"/data\")","def get_data():","    return jsonify(message_history[-25:])","","@app.route(\"/gateways\")","def get_gateways():","    return jsonify(sorted(list(gateways_seen)))","","# MQTT Callbacks","def on_connect(client, userdata, flags, reason_code, properties):","    if reason_code == 0:","        print(\"‚úÖ Connected to AWS IoT Core\")","        client.subscribe(TOPIC)","        print(f\"üì° Subscribed to topic: {TOPIC}\")","    else:","        print(f\"‚ùå Connection failed (reason code: {reason_code})\")","","def on_disconnect(client, userdata, disconnect_flags, reason_code, properties):","    print(f\"‚ö†Ô∏è Disconnected from broker (reason: {reason_code})\")","    print(\"‚è≥ Reconnecting in 5 seconds...\")","    time.sleep(5)","    try:","        client.reconnect()","    except Exception as e:","        print(f\"‚ùå Reconnect failed: {str(e)}\")","","def on_message(client, userdata, msg):","    try:","        payload = json.loads(msg.payload.decode())","        print(f\"üì© Raw MQTT payload: {payload}\")  # Debug log","        ","        timestamp = payload.get(\"timestamp\", time.strftime(\"%Y-%m-%d %H:%M:%S\"))","        location = payload.get(\"location\", {})","        lat = location.get(\"lat\", 0.0)","        lng = location.get(\"lng\", 0.0)","        count = int(payload.get(\"vehicle_count\", 0))","        gateway = payload.get(\"gateway_id\", \"unknown\")","        level = classify_traffic(count)","","        # Print to console","        level_emoji = {\"LOW\":\"üü¢\", \"MEDIUM\":\"üü†\", \"HEAVY\":\"üî¥\"}[level]","        print(f\"\\nüöó Vehicle Data @ {timestamp}\")","        print(f\"   ‚Üí Location: ({lat:.6f}, {lng:.6f})\")","        print(f\"   ‚Üí Vehicles: {count}\")","        print(f\"   ‚Üí Gateway: {gateway}\")","        print(f\"   ‚Üí Traffic: {level_emoji} {level}\")","        print(\"--------------------------------------------------\")","","        # Update data and emit","        with data_lock:","            gateways_seen.add(gateway)","            message_history.append({","                \"timestamp\": timestamp,","                \"lat\": lat,","                \"lng\": lng,","                \"vehicle_count\": count,","                \"gateway\": gateway,","                \"traffic_level\": level","            })","            if len(message_history) > 100:","                message_history.pop(0)","","            # Emit update to all clients","            sio.emit('update', {","                'lat': lat,","                'lng': lng,","                'vehicle_count': count,","                'traffic_level': level,","                'gateway': gateway,","                'timestamp': timestamp","            })","            print(f\"üì¢ Emitted update for gateway {gateway}\")","","        # Publish alerts if needed","        if level in (\"MEDIUM\", \"HEAVY\"):","            alert = {","                \"timestamp\": timestamp,","                \"gateway_id\": gateway,","                \"vehicle_count\": count,","                \"traffic_level\": level,","                \"location\": {\"lat\": lat, \"lng\": lng}","            }","            client.publish(ALERT_TOPIC, json.dumps(alert))","            print(f\"üö® Published alert for {gateway}\")","","    except json.JSONDecodeError:","        print(\"‚ùå Failed to decode JSON payload\")","    except Exception as e:","        print(f\"‚ùå Error processing message: {str(e)}\")","","def run_flask():","    url = get_cloud9_preview_url(port=8080)","    print(\"\\nüåê Dashboard URL:\")","    print(url)","    print(\"‚ÑπÔ∏è If it 404s, use Cloud9 menu: Preview ‚Üí Preview Running Application\\n\")","    app.run(host=\"0.0.0.0\", port=8080)","","def main():","    # Configure MQTT client","    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)","    client.on_connect = on_connect","    client.on_disconnect = on_disconnect","    client.on_message = on_message","","    try:","        # Set up TLS","        client.tls_set(","            ca_certs=f\"{CERT_PATH}AmazonRootCA1.pem\",","            certfile=f\"{CERT_PATH}device-certificate.pem.crt\",","            keyfile=f\"{CERT_PATH}private.pem.key\",","            tls_version=ssl.PROTOCOL_TLSv1_2","        )","    except Exception as e:","        print(f\"‚ùå Failed to configure TLS: {str(e)}\")","        return","","    try:","        print(\"üîå Connecting to AWS IoT Core...\")","        client.connect(MQTT_BROKER, MQTT_PORT, 60)","    except Exception as e:","        print(f\"‚ùå Connection error: {str(e)}\")","        return","","    print(\"\\nüöÄ Fog handler running. Waiting for LoRaWAN messages...\")","    print(\"üì¥ Press Ctrl+C to stop\\n\")","","    # Start Flask in a separate thread","    Thread(target=run_flask, daemon=True).start()","","    try:","        client.loop_forever()","    except KeyboardInterrupt:","        print(\"\\nüõë Shutdown signal received, disconnecting...\")","        client.disconnect()","    except Exception as e:","        print(f\"‚ùå Unexpected error: {str(e)}\")","","if __name__ == \"__main__\":","    main()"],"id":154}],[{"start":{"row":44,"column":12},"end":{"row":44,"column":14},"action":"remove","lines":["üì°"],"id":198}],[{"start":{"row":93,"column":17},"end":{"row":93,"column":18},"action":"remove","lines":["C"],"id":199},{"start":{"row":93,"column":16},"end":{"row":93,"column":17},"action":"remove","lines":[" "]},{"start":{"row":93,"column":15},"end":{"row":93,"column":16},"action":"remove","lines":["‚úÖ"]}],[{"start":{"row":93,"column":15},"end":{"row":93,"column":16},"action":"insert","lines":["C"],"id":200}],[{"start":{"row":97,"column":17},"end":{"row":97,"column":18},"action":"remove","lines":[" "],"id":201},{"start":{"row":97,"column":16},"end":{"row":97,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":95,"column":16},"end":{"row":95,"column":18},"action":"remove","lines":["üì°"],"id":202}],[{"start":{"row":100,"column":13},"end":{"row":100,"column":14},"action":"remove","lines":["Ô∏è"],"id":203},{"start":{"row":100,"column":12},"end":{"row":100,"column":13},"action":"remove","lines":["‚ö†"]}],[{"start":{"row":101,"column":12},"end":{"row":101,"column":13},"action":"remove","lines":[" "],"id":204},{"start":{"row":101,"column":11},"end":{"row":101,"column":12},"action":"remove","lines":["‚è≥"]}],[{"start":{"row":106,"column":17},"end":{"row":106,"column":18},"action":"remove","lines":[" "],"id":205},{"start":{"row":106,"column":16},"end":{"row":106,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":111,"column":16},"end":{"row":111,"column":18},"action":"remove","lines":["üì©"],"id":206}],[{"start":{"row":122,"column":30},"end":{"row":122,"column":32},"action":"remove","lines":["üü¢"],"id":207}],[{"start":{"row":122,"column":30},"end":{"row":122,"column":31},"action":"insert","lines":["O"],"id":208},{"start":{"row":122,"column":31},"end":{"row":122,"column":32},"action":"insert","lines":["r"]},{"start":{"row":122,"column":32},"end":{"row":122,"column":33},"action":"insert","lines":["a"]},{"start":{"row":122,"column":33},"end":{"row":122,"column":34},"action":"insert","lines":["n"]},{"start":{"row":122,"column":34},"end":{"row":122,"column":35},"action":"insert","lines":["g"]}],[{"start":{"row":122,"column":34},"end":{"row":122,"column":35},"action":"remove","lines":["g"],"id":209},{"start":{"row":122,"column":33},"end":{"row":122,"column":34},"action":"remove","lines":["n"]},{"start":{"row":122,"column":32},"end":{"row":122,"column":33},"action":"remove","lines":["a"]},{"start":{"row":122,"column":31},"end":{"row":122,"column":32},"action":"remove","lines":["r"]},{"start":{"row":122,"column":30},"end":{"row":122,"column":31},"action":"remove","lines":["O"]}],[{"start":{"row":122,"column":30},"end":{"row":122,"column":31},"action":"insert","lines":["F"],"id":210}],[{"start":{"row":122,"column":30},"end":{"row":122,"column":31},"action":"remove","lines":["F"],"id":211}],[{"start":{"row":122,"column":30},"end":{"row":122,"column":31},"action":"insert","lines":["G"],"id":212},{"start":{"row":122,"column":31},"end":{"row":122,"column":32},"action":"insert","lines":["r"]},{"start":{"row":122,"column":32},"end":{"row":122,"column":33},"action":"insert","lines":["e"]},{"start":{"row":122,"column":33},"end":{"row":122,"column":34},"action":"insert","lines":["e"]},{"start":{"row":122,"column":34},"end":{"row":122,"column":35},"action":"insert","lines":["n"]}],[{"start":{"row":122,"column":48},"end":{"row":122,"column":50},"action":"remove","lines":["üü†"],"id":213}],[{"start":{"row":122,"column":48},"end":{"row":122,"column":49},"action":"insert","lines":["O"],"id":214},{"start":{"row":122,"column":49},"end":{"row":122,"column":50},"action":"insert","lines":["r"]},{"start":{"row":122,"column":50},"end":{"row":122,"column":51},"action":"insert","lines":["a"]},{"start":{"row":122,"column":51},"end":{"row":122,"column":52},"action":"insert","lines":["n"]},{"start":{"row":122,"column":52},"end":{"row":122,"column":53},"action":"insert","lines":["g"]},{"start":{"row":122,"column":53},"end":{"row":122,"column":54},"action":"insert","lines":["e"]}],[{"start":{"row":122,"column":66},"end":{"row":122,"column":68},"action":"remove","lines":["üî¥"],"id":215}],[{"start":{"row":122,"column":66},"end":{"row":122,"column":67},"action":"insert","lines":["R"],"id":216},{"start":{"row":122,"column":67},"end":{"row":122,"column":68},"action":"insert","lines":["e"]},{"start":{"row":122,"column":68},"end":{"row":122,"column":69},"action":"insert","lines":["d"]}],[{"start":{"row":123,"column":18},"end":{"row":123,"column":20},"action":"remove","lines":["üöó"],"id":217}],[{"start":{"row":153,"column":20},"end":{"row":153,"column":22},"action":"remove","lines":["üì¢"],"id":218}],[{"start":{"row":165,"column":20},"end":{"row":165,"column":22},"action":"remove","lines":["üö®"],"id":219}],[{"start":{"row":174,"column":13},"end":{"row":174,"column":15},"action":"remove","lines":["üåê"],"id":220}],[{"start":{"row":195,"column":17},"end":{"row":195,"column":18},"action":"remove","lines":[" "],"id":221},{"start":{"row":195,"column":16},"end":{"row":195,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":202,"column":17},"end":{"row":202,"column":18},"action":"remove","lines":[" "],"id":222},{"start":{"row":202,"column":16},"end":{"row":202,"column":17},"action":"remove","lines":["‚ùå"]}],[{"start":{"row":205,"column":13},"end":{"row":205,"column":15},"action":"remove","lines":["üöÄ"],"id":223}],[{"start":{"row":206,"column":11},"end":{"row":206,"column":13},"action":"remove","lines":["üì¥"],"id":224}],[{"start":{"row":214,"column":17},"end":{"row":214,"column":19},"action":"remove","lines":["üõë"],"id":225}],[{"start":{"row":217,"column":16},"end":{"row":217,"column":17},"action":"remove","lines":["‚ùå"],"id":226}]]},"ace":{"folds":[],"scrolltop":1234.4631710815431,"scrollleft":0,"selection":{"start":{"row":217,"column":16},"end":{"row":217,"column":16},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":311,"mode":"ace/mode/python"}},"timestamp":1754660238524,"hash":"a802e0682379f603446f6699f69433fef66f854b"}
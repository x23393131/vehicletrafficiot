{"filter":false,"title":"tail_s3_log.py","tooltip":"/tail_s3_log.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["# tail_s3_log.py","import boto3","","BUCKET_NAME = \"lorawan-traffic-logs\"","KEY = \"logs/traffic-latest.csv\"","","def show_s3_tail(lines=25):","    s3 = boto3.client('s3')","    try:","        obj = s3.get_object(Bucket=BUCKET_NAME, Key=KEY)","        content = obj['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"\\n‚úÖ Found {len(content)} entries in {KEY}:\\n\")","        for line in content[-lines:]:","            print(\" ‚Üí\", line)","    except Exception as e:","        print(\"‚ùå Error reading S3:\", str(e))","","if __name__ == '__main__':","    show_s3_tail()",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":20,"column":0},"action":"remove","lines":["# tail_s3_log.py","import boto3","","BUCKET_NAME = \"lorawan-traffic-logs\"","KEY = \"logs/traffic-latest.csv\"","","def show_s3_tail(lines=25):","    s3 = boto3.client('s3')","    try:","        obj = s3.get_object(Bucket=BUCKET_NAME, Key=KEY)","        content = obj['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"\\n‚úÖ Found {len(content)} entries in {KEY}:\\n\")","        for line in content[-lines:]:","            print(\" ‚Üí\", line)","    except Exception as e:","        print(\"‚ùå Error reading S3:\", str(e))","","if __name__ == '__main__':","    show_s3_tail()",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":0},"action":"insert","lines":["import boto3","import json","import time","from datetime import datetime","","# Constants","LAMBDA_NAME = 'fog_handler'","BUCKET_NAME = 'lorawan-traffic-logs'","OBJECT_KEY = 'logs/traffic-latest.csv'","REGION = 'us-east-1'","","# Clients","logs_client = boto3.client('logs', region_name=REGION)","s3_client = boto3.client('s3', region_name=REGION)","","def check_lambda_logs():","    print(\"\\nüîç Checking latest Lambda execution logs...\")","    try:","        log_group = f\"/aws/lambda/{LAMBDA_NAME}\"","        streams = logs_client.describe_log_streams(","            logGroupName=log_group,","            orderBy='LastEventTime',","            descending=True,","            limit=1","        )","        if not streams['logStreams']:","            print(\"‚ùå No logs found.\")","            return","        stream_name = streams['logStreams'][0]['logStreamName']","        events = logs_client.get_log_events(","            logGroupName=log_group,","            logStreamName=stream_name,","            startTime=int((time.time() - 300) * 1000),  # last 5 min","            limit=20","        )","        for e in events['events']:","            print(\"üìå\", e['message'].strip())","    except Exception as e:","        print(\"‚ùå Error checking logs:\", str(e))","","def check_s3_output(lines=25):","    print(\"\\nüìÅ Checking S3 output...\")","    try:","        obj = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        data = obj['Body'].read().decode('utf-8').strip().split('\\n')","        print(f\"‚úÖ Found {len(data)} entries.\")","        print(\"üßæ Last entries:\")","        for line in data[-lines:]:","            print(\" ‚Üí\", line)","    except Exception as e:","        print(\"‚ùå S3 Read Error:\", str(e))","","if __name__ == '__main__':","    print(\"üö¶ IoT Core ‚ûù Lambda ‚ûù S3 Monitoring Started\")","    check_lambda_logs()","    check_s3_output()",""],"id":3}]]},"ace":{"folds":[],"scrolltop":289,"scrollleft":0,"selection":{"start":{"row":38,"column":47},"end":{"row":38,"column":47},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19,"state":"start","mode":"ace/mode/python"}},"timestamp":1754597567625,"hash":"4f7e3d926f2626443baf45f14916f38dcf430ab8"}
{"filter":false,"title":"test_fog_pipeline.py","tooltip":"/test_fog_pipeline.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["import boto3","import json","import time","from datetime import datetime, timedelta","","# CONFIGURATIONS","LAMBDA_NAME = 'fog_handler'","BUCKET_NAME = 'lorawan-traffic-logs'","OBJECT_KEY = 'logs/traffic-latest.csv'","REGION = 'us-east-1'","","# Clients","logs_client = boto3.client('logs', region_name=REGION)","lambda_client = boto3.client('lambda', region_name=REGION)","s3_client = boto3.client('s3', region_name=REGION)","","def check_lambda_logs():","    print(\"\\nüîç Checking recent Lambda logs...\")","    try:","        log_group_name = f\"/aws/lambda/{LAMBDA_NAME}\"","        streams = logs_client.describe_log_streams(","            logGroupName=log_group_name,","            orderBy='LastEventTime',","            descending=True,","            limit=1","        )","        if not streams['logStreams']:","            print(\"‚ùå No log streams found.\")","            return","","        log_stream = streams['logStreams'][0]['logStreamName']","        events = logs_client.get_log_events(","            logGroupName=log_group_name,","            logStreamName=log_stream,","            startTime=int((time.time() - 60) * 1000),","            limit=10","        )","","        print(\"üìú Last log entries:\")","        for event in events['events']:","            print(f\"  üìå {event['message']}\")","","    except Exception as e:","        print(\"‚ùå Error checking logs:\", str(e))","","","def check_s3_file():","    print(\"\\nüìÅ Checking S3 file contents...\")","    try:","        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        body = response['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"‚úÖ Found {len(body)} lines in {OBJECT_KEY}.\")","        print(\"üßæ Last few entries:\")","        for line in body[-3:]:","            print(f\"  ‚Üí {line}\")","","    except s3_client.exceptions.NoSuchKey:","        print(f\"‚ùå File not found: {OBJECT_KEY}\")","    except Exception as e:","        print(\"‚ùå Error reading S3:\", str(e))","","","def test_lambda_invocation():","    print(\"\\nüöÄ Manually invoking Lambda with test data...\")","    test_event = {","        \"timestamp\": datetime.utcnow().isoformat(),","        \"location\": {\"lat\": 53.349805, \"lng\": -6.26031},","        \"vehicle_count\": 42","    }","    try:","        response = lambda_client.invoke(","            FunctionName=LAMBDA_NAME,","            InvocationType='RequestResponse',","            Payload=json.dumps(test_event)","        )","        result = json.loads(response['Payload'].read().decode())","        print(\"‚úÖ Lambda response:\", result)","","    except Exception as e:","        print(\"‚ùå Lambda invoke error:\", str(e))","","","if __name__ == '__main__':","    test_lambda_invocation()","    time.sleep(5)","    check_lambda_logs()","    check_s3_file()",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"remove","lines":["import boto3","import json","import time","from datetime import datetime, timedelta","","# CONFIGURATIONS","LAMBDA_NAME = 'fog_handler'","BUCKET_NAME = 'lorawan-traffic-logs'","OBJECT_KEY = 'logs/traffic-latest.csv'","REGION = 'us-east-1'","","# Clients","logs_client = boto3.client('logs', region_name=REGION)","lambda_client = boto3.client('lambda', region_name=REGION)","s3_client = boto3.client('s3', region_name=REGION)","","def check_lambda_logs():","    print(\"\\nüîç Checking recent Lambda logs...\")","    try:","        log_group_name = f\"/aws/lambda/{LAMBDA_NAME}\"","        streams = logs_client.describe_log_streams(","            logGroupName=log_group_name,","            orderBy='LastEventTime',","            descending=True,","            limit=1","        )","        if not streams['logStreams']:","            print(\"‚ùå No log streams found.\")","            return","","        log_stream = streams['logStreams'][0]['logStreamName']","        events = logs_client.get_log_events(","            logGroupName=log_group_name,","            logStreamName=log_stream,","            startTime=int((time.time() - 60) * 1000),","            limit=10","        )","","        print(\"üìú Last log entries:\")","        for event in events['events']:","            print(f\"  üìå {event['message']}\")","","    except Exception as e:","        print(\"‚ùå Error checking logs:\", str(e))","","","def check_s3_file():","    print(\"\\nüìÅ Checking S3 file contents...\")","    try:","        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        body = response['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"‚úÖ Found {len(body)} lines in {OBJECT_KEY}.\")","        print(\"üßæ Last few entries:\")","        for line in body[-3:]:","            print(f\"  ‚Üí {line}\")","","    except s3_client.exceptions.NoSuchKey:","        print(f\"‚ùå File not found: {OBJECT_KEY}\")","    except Exception as e:","        print(\"‚ùå Error reading S3:\", str(e))","","","def test_lambda_invocation():","    print(\"\\nüöÄ Manually invoking Lambda with test data...\")","    test_event = {","        \"timestamp\": datetime.utcnow().isoformat(),","        \"location\": {\"lat\": 53.349805, \"lng\": -6.26031},","        \"vehicle_count\": 42","    }","    try:","        response = lambda_client.invoke(","            FunctionName=LAMBDA_NAME,","            InvocationType='RequestResponse',","            Payload=json.dumps(test_event)","        )","        result = json.loads(response['Payload'].read().decode())","        print(\"‚úÖ Lambda response:\", result)","","    except Exception as e:","        print(\"‚ùå Lambda invoke error:\", str(e))","","","if __name__ == '__main__':","    test_lambda_invocation()","    time.sleep(5)","    check_lambda_logs()","    check_s3_file()",""],"id":9},{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["import boto3","import json","import time","from datetime import datetime","","# CONFIGURATIONS","LAMBDA_NAME = 'fog_handler'","BUCKET_NAME = 'lorawan-traffic-logs'","OBJECT_KEY = 'logs/traffic-latest.csv'","REGION = 'us-east-1'","","# AWS Clients","logs_client = boto3.client('logs', region_name=REGION)","lambda_client = boto3.client('lambda', region_name=REGION)","s3_client = boto3.client('s3', region_name=REGION)","","# 1Ô∏è‚É£ MANUAL TEST INVOCATION","def test_lambda_invocation():","    print(\"\\nüöÄ Invoking Lambda with test event...\")","    test_event = {","        \"timestamp\": datetime.utcnow().isoformat(),","        \"location\": {\"lat\": 53.349805, \"lng\": -6.26031},","        \"vehicle_count\": 42","    }","    try:","        response = lambda_client.invoke(","            FunctionName=LAMBDA_NAME,","            InvocationType='RequestResponse',","            Payload=json.dumps(test_event)","        )","        result = json.loads(response['Payload'].read().decode())","        print(\"‚úÖ Lambda responded:\", result)","    except Exception as e:","        print(\"‚ùå Lambda invoke error:\", str(e))","","# 2Ô∏è‚É£ CHECK CLOUDWATCH LOGS","def check_lambda_logs():","    print(\"\\nüîç Checking recent Lambda logs...\")","    try:","        log_group = f\"/aws/lambda/{LAMBDA_NAME}\"","        streams = logs_client.describe_log_streams(","            logGroupName=log_group,","            orderBy='LastEventTime',","            descending=True,","            limit=1","        )","        if not streams['logStreams']:","            print(\"‚ùå No log streams found.\")","            return","","        log_stream = streams['logStreams'][0]['logStreamName']","        events = logs_client.get_log_events(","            logGroupName=log_group,","            logStreamName=log_stream,","            startTime=int((time.time() - 120) * 1000),","            limit=10","        )","","        print(\"üìú Last log entries:\")","        for event in events['events']:","            print(f\"  üìå {event['message']}\")","","    except Exception as e:","        print(\"‚ùå Error fetching logs:\", str(e))","","# 3Ô∏è‚É£ CHECK OUTPUT FILE IN S3","def check_s3_file():","    print(\"\\nüìÅ Checking S3 for output file...\")","    try:","        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        lines = response['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"‚úÖ Found {len(lines)} lines in {OBJECT_KEY}\")","        print(\"üßæ Last entries:\")","        for line in lines[-3:]:","            print(f\"  ‚Üí {line}\")","","    except s3_client.exceptions.NoSuchKey:","        print(f\"‚ùå File not found: {OBJECT_KEY}\")","    except Exception as e:","        print(\"‚ùå Error reading S3 file:\", str(e))","","","if __name__ == '__main__':","    test_lambda_invocation()","    time.sleep(5)","    check_lambda_logs()","    check_s3_file()",""]}],[{"start":{"row":66,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["def check_s3_file():","    print(\"\\nüìÅ Checking S3 for output file...\")","    try:","        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        lines = response['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"‚úÖ Found {len(lines)} lines in {OBJECT_KEY}\")","        print(\"üßæ Last entries:\")","        for line in lines[-3:]:","            print(f\"  ‚Üí {line}\")","","    except s3_client.exceptions.NoSuchKey:","        print(f\"‚ùå File not found: {OBJECT_KEY}\")","    except Exception as e:","        print(\"‚ùå Error reading S3 file:\", str(e))",""],"id":10},{"start":{"row":66,"column":0},"end":{"row":82,"column":44},"action":"insert","lines":["def check_s3_file():","    print(\"\\nüìÅ Checking S3 for output file...\")","    try:","        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=OBJECT_KEY)","        body = response['Body'].read().decode('utf-8').strip().split('\\n')","","        print(f\"‚úÖ Found {len(body)} lines in {OBJECT_KEY}.\")","        print(\"üßæ Last 25 entries:\")","","        # Show last 25 or all if fewer lines","        for line in body[-25:]:","            print(f\"  ‚Üí {line}\")","","    except s3_client.exceptions.NoSuchKey:","        print(f\"‚ùå File not found: {OBJECT_KEY}\")","    except Exception as e:","        print(\"‚ùå Error reading S3:\", str(e))"]}]]},"ace":{"folds":[],"scrolltop":619.3333333333334,"scrollleft":0,"selection":{"start":{"row":82,"column":44},"end":{"row":82,"column":44},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":43,"state":"start","mode":"ace/mode/python"}},"timestamp":1754595164185,"hash":"77a10a6b982baaaede9c1c224df9d5c4995d8588"}
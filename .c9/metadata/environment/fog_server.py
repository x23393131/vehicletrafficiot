{"filter":false,"title":"fog_server.py","tooltip":"/fog_server.py","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":29,"column":16},"end":{"row":29,"column":25},"action":"remove","lines":["localhost"],"id":4}],[{"start":{"row":29,"column":16},"end":{"row":29,"column":26},"action":"insert","lines":["172.17.0.2"],"id":5}],[{"start":{"row":29,"column":16},"end":{"row":29,"column":26},"action":"remove","lines":["172.17.0.2"],"id":6},{"start":{"row":29,"column":16},"end":{"row":29,"column":25},"action":"insert","lines":["127.0.0.1"]}],[{"start":{"row":9,"column":0},"end":{"row":15,"column":31},"action":"remove","lines":["def on_connect(client, userdata, flags, rc):","    print(\"Connected to broker\")","    client.subscribe(\"lorawan/traffic\")","","def on_message(client, userdata, msg):","    payload = json.loads(msg.payload.decode())","    print(\"Received:\", payload)"],"id":7},{"start":{"row":9,"column":0},"end":{"row":16,"column":4},"action":"insert","lines":["def on_connect(client, userdata, flags, rc):","    print(\"Connected to broker with code\", rc)","    client.subscribe(\"lorawan/traffic\")","","def on_message(client, userdata, msg):","    print(\"Message received on topic:\", msg.topic)","    print(\"Payload:\", msg.payload.decode())","    "]}],[{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "],"id":8},{"start":{"row":15,"column":43},"end":{"row":16,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":13,"column":0},"end":{"row":23,"column":10},"action":"remove","lines":["def on_message(client, userdata, msg):","    print(\"Message received on topic:\", msg.topic)","    print(\"Payload:\", msg.payload.decode())","","    with open(CSV_FILE, mode='a', newline='') as file:","        writer = csv.writer(file)","        writer.writerow([","            payload['timestamp'],","            f\"{payload['location']['lat']},{payload['location']['lng']}\",","            payload['vehicle_count']","        ])"],"id":9},{"start":{"row":13,"column":0},"end":{"row":28,"column":53},"action":"insert","lines":["def on_message(client, userdata, msg):","    print(\"Message received on topic:\", msg.topic)","    raw_payload = msg.payload.decode()","    print(\"Payload:\", raw_payload)","","    try:","        payload = json.loads(raw_payload)","        with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:","            writer = csv.writer(file)","            writer.writerow([","                payload['timestamp'],","                f\"{payload['location']['lat']},{payload['location']['lng']}\",","                payload['vehicle_count']","            ])","    except Exception as e:","        print(\"Error parsing or writing message:\", e)"]}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["# fog_server.py","# Acts as fog/cloud server receiving LoRaWAN messages via MQTT","","import json","import csv","import paho.mqtt.client as mqtt","","CSV_FILE = \"data.csv\"","","def on_connect(client, userdata, flags, rc):","    print(\"Connected to broker with code\", rc)","    client.subscribe(\"lorawan/traffic\")","","def on_message(client, userdata, msg):","    print(\"Message received on topic:\", msg.topic)","    raw_payload = msg.payload.decode()","    print(\"Payload:\", raw_payload)","","    try:","        payload = json.loads(raw_payload)","        with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:","            writer = csv.writer(file)","            writer.writerow([","                payload['timestamp'],","                f\"{payload['location']['lat']},{payload['location']['lng']}\",","                payload['vehicle_count']","            ])","    except Exception as e:","        print(\"Error parsing or writing message:\", e)","","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.connect(\"127.0.0.1\", 1883, 60)","print(\"Fog server running. Listening for LoRaWAN data...\")","client.loop_forever()",""],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["# fog_server.py","# Acts as fog/cloud server receiving LoRaWAN messages via MQTT","","import json","import csv","import paho.mqtt.client as mqtt","","CSV_FILE = \"data.csv\"","","def on_connect(client, userdata, flags, rc):","    print(\"Connected to broker with code\", rc)","    client.subscribe(\"lorawan/traffic\")","","def on_message(client, userdata, msg):","    print(\"Message received on topic:\", msg.topic)","    raw_payload = msg.payload.decode()","    print(\"Payload:\", raw_payload)","","    try:","        payload = json.loads(raw_payload)","        with open(CSV_FILE, mode='a', newline='', encoding='utf-8') as file:","            writer = csv.writer(file)","            writer.writerow([","                payload['timestamp'],","                f\"{payload['location']['lat']},{payload['location']['lng']}\",","                payload['vehicle_count']","            ])","    except Exception as e:","        print(\"Error parsing or writing message:\", e)","","client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.connect(\"127.0.0.1\", 1883, 60)","print(\"Fog server running. Listening for LoRaWAN data...\")","client.loop_forever()",""],"id":11}],[{"start":{"row":30,"column":0},"end":{"row":36,"column":21},"action":"remove","lines":["client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.connect(\"127.0.0.1\", 1883, 60)","print(\"Fog server running. Listening for LoRaWAN data...\")","client.loop_forever()"],"id":12},{"start":{"row":30,"column":0},"end":{"row":38,"column":21},"action":"insert","lines":["client = mqtt.Client()","client.on_connect = on_connect","client.on_message = on_message","","client.enable_logger()  # Add this for debug logging","","client.connect(\"127.0.0.1\", 1883, 60)","print(\"Fog server running. Listening for LoRaWAN data...\")","client.loop_forever()"]}]]},"ace":{"folds":[],"scrolltop":347,"scrollleft":0,"selection":{"start":{"row":38,"column":21},"end":{"row":38,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":23,"state":"start","mode":"ace/mode/python"}},"timestamp":1754498057281,"hash":"2d7e9437f2cfec4f4204daaac912fba0ffb4e70c"}